resources:
- name: bosh-deployment
  type: git
  source:
    uri: https://github.com/cloudfoundry/bosh-deployment.git
    branch: master

- name: cf-deployment-rc
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-deployment.git
    branch: release-candidate

- name: cf-deployment-old
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-deployment.git
    branch: {{cf-deployment-old-tag}}

- name: postgres-release-develop
  type: git
  source:
    uri: https://github.com/cloudfoundry/postgres-release.git
    branch: develop

- name: cf-acceptance-tests
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-acceptance-tests.git
    branch: master

- name: cf-deployment-concourse-tasks
  type: git
  source:
    branch: master
    uri: https://github.com/cloudfoundry/cf-deployment-concourse-tasks.git

jobs:
- name: upload-stemcells-releases
  serial_groups: [cf]
  plan:
  - in_parallel:
    - get: postgres-release
      resource: postgres-release-develop
    - get: cf-deployment
      resource: cf-deployment-rc
    - get: bosh-deployment
      resource: bosh-deployment
  - task: upload-stemcell-lite
    file: postgres-release/ci/scripts/upload-stemcell/task.yml
    params: &lite_params
      BOSH_DIRECTOR_IP: {{lite_bosh_director}}
      BOSH_DIRECTOR_NAME: {{lite_bosh_director_name}}
      BOSH_CLIENT: {{lite_bosh_user}}
      BOSH_CLIENT_SECRET: {{lite_bosh_password}}
      BOSH_CA_CERT: {{lite_bosh_ca_cert}}
      STEMCELL_VERSION: {{stemcell_version}}
      API_USER: admin
      API_PASSWORD: {{cf_api_password}}
  - task: create-postgres-dev-release-tarball
    file: postgres-release/ci/scripts/create-dev-release-tarball/task.yml
    input_mapping: {dev-release: postgres-release}
    output_mapping: {dev-release-tarball: postgres-tarball}
    params:
      <<: *lite_params
      REL_NAME: postgres
      REL_VERSION: v999+dev.1
  - task: upload-postgres-dev-release-lite
    file: postgres-release/ci/scripts/upload-dev-release-tarball/task.yml
    input_mapping: {dev-release-tarball: postgres-tarball}
    params:
      <<: *lite_params
  - task: update-cloud-config
    file: postgres-release/ci/scripts/update-cloud-config/task.yml
    params:
      <<: *lite_params
  - task: update-runtime-config
    file: postgres-release/ci/scripts/update-runtime-config/task.yml
    params:
      <<: *lite_params

- name: deploy-fresh-cf
  serial_groups: [cf]
  plan:
  - in_parallel:
    - get: cf-deployment
      resource: cf-deployment-rc
    - get: postgres-release
      resource: postgres-release-develop
      passed: [upload-stemcells-releases]
      trigger: true
  - task: deploy-cf
    file: postgres-release/ci/scripts/deploy-cf/task.yml
    params:
      <<: *lite_params
      USE_LATEST_PGREL: true

- name: test-fresh-run-cats
  serial_groups: [cf]
  plan:
  - in_parallel:
    - get: cf-acceptance-tests
    - get: cf-deployment-concourse-tasks
    - get: postgres-release
      resource: postgres-release-develop
      passed: [deploy-fresh-cf]
      trigger: true
  - task: prepare-cats-config
    file: postgres-release/ci/scripts/prepare-cats-config/task.yml
    output_mapping: {cats-config: integration-config}
    params:
      <<: *lite_params
      CONFIG_FILE_NAME: cats_config.json
  - task: run-cats
    file: cf-deployment-concourse-tasks/run-cats/task.yml
    input_mapping: {integration-config: integration-config}
    params:
      CONFIG_FILE_PATH: cats_config.json
      NODES: 4
      CAPTURE_LOGS: true

- name: delete-deployment-fresh
  serial_groups: [cf]
  plan:
  - in_parallel:
    - get: postgres-release
      resource: postgres-release-develop
      passed: [test-fresh-run-cats]
      trigger: true
  - task: delete-cf-deployment
    file: postgres-release/ci/scripts/run-bosh-delete/task.yml
    params:
      <<: *lite_params

- name: test-old-deployment
  serial_groups: [cf]
  plan:
  - in_parallel:
    - get: cf-deployment-old
    - get: cf-deployment-rc
    - get: postgres-release
      resource: postgres-release-develop
      passed: [delete-deployment-fresh]
      trigger: true
    - get: cf-acceptance-tests
  - task: deploy-cf-old
    input_mapping: {cf-deployment: cf-deployment-old}
    file: postgres-release/ci/scripts/deploy-cf/task.yml
    params:
      <<: *lite_params
      USE_LATEST_PGREL: false
  - task: populate-db
    file: postgres-release/ci/scripts/populate-db/task.yml
    params:
      <<: *lite_params
  - task: deploy-cf
    file: postgres-release/ci/scripts/deploy-cf/task.yml
    input_mapping: {cf-deployment: cf-deployment-rc}
    params:
      <<: *lite_params
      USE_LATEST_PGREL: true
  - task: check-db
    file: postgres-release/ci/scripts/check-db/task.yml
    params:
      <<: *lite_params

- name: delete-deployment-old
  serial_groups: [cf]
  plan:
  - in_parallel:
    - get: postgres-release
      resource: postgres-release-develop
      passed: [test-old-deployment]
      trigger: true
  - task: delete-cf-deployment
    file: postgres-release/ci/scripts/run-bosh-delete/task.yml
    params:
      <<: *lite_params

- name: cleanup-releases
  serial_groups: [cf]
  plan:
  - in_parallel:
    - get: postgres-release
      resource: postgres-release-develop
      passed: [delete-deployment-old]
      trigger: true
  - task: cleanup-releases
    file: postgres-release/ci/scripts/run-bosh-cleanup/task.yml
    params:
      <<: *lite_params
